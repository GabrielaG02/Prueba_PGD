import { useState, useEffect, useMemo } from 'react';
import { useCategories } from './useCategories';  
import type { Document } from '../types/document';
import type { DocumentFormValues } from '../components/organisms/DocumentForm';

const STORAGE_KEY = 'documents';

/**
 * Custom hook to manage documents 
 *
 * - Loads and saves to localStorage
 * - Generates IDs and timestamps for new documents
 * - Provides list of categories and subcategories via useCategories
 */
export const useDocuments = () => {
  const [documents, setDocuments] = useState<Document[]>([]);

  // Load from localStorage on mount
  useEffect(() => {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      try {
        const parsed = JSON.parse(stored) as Document[];
        setDocuments(parsed);
      } catch (err) {
        console.error('Failed to parse documents from localStorage', err);
      }
    }
  }, []);

  // Persist to localStorage whenever documents change
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(documents));
  }, [documents]);

  /**
   * Create a new document
   * @param values - form values, id will be autogenerated
   */
  const addDocument = (values: DocumentFormValues) => {
    const newDoc: Document = {
      id: crypto.randomUUID(),
      fechaSubida: new Date().toISOString(),
      nombre: values.nombre,
      descripcion: values.descripcion,
      categoria: values.categoria as Document['categoria'],
      subcategoria: values.subcategoria,
      tipo: values.tipo as Document['tipo'],
      estado: values.estado,
    };
    setDocuments((prev) => [...prev, newDoc]);
  };

  /**
   * Update an existing document
   * @param values - form values with existing id
   */
  const updateDocument = (values: DocumentFormValues) => {
    if (!values.id) return;
    setDocuments((prev) =>
      prev.map((doc) =>
        doc.id === values.id
          ? {
              ...doc,
              nombre: values.nombre,
              descripcion: values.descripcion,
              categoria: values.categoria as Document['categoria'],
              subcategoria: values.subcategoria,
              tipo: values.tipo as Document['tipo'],
              estado: values.estado,
            }
          : doc
      )
    );
  };

  /**
   * Delete a document by id
   * @param id - document identifier
   */
  const deleteDocument = (id: string) => {
    setDocuments((prev) => prev.filter((doc) => doc.id !== id));
  };

  // Expose categories and subcategories for filter controls
  const { categories, subcategories } = useCategories();

  return useMemo(
    () => ({
      documents,
      categories,
      subcategories,
      addDocument,
      updateDocument,
      deleteDocument,
    }),
    [documents, categories, subcategories]
  );
};

export default useDocuments;